{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\micna\\\\OneDrive\\\\Desktop\\\\movemateAssignment\\\\src\\\\components\\\\NewOrder\\\\NewOrder.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport \"./NewOrder.css\";\nimport OrderForm from \"./OrderForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NewOrder = props => {\n  _s();\n\n  //Tracks if the order form is being used or not\n  const [isEditing, setIsEditing] = useState(false); //Passes in the order data to a higher (parent of this child) component\n\n  const saveOrderDataHandler = enteredOrderData => {\n    const OrderData = { ...enteredOrderData,\n\n      /*create a unique id to each order (I know it's not 100% \r\n      unique since theres a tiny chance you can get the same number but for the scope of \r\n      the project I decided to go with this method) */\n      id: Math.random().toString()\n    };\n    props.onAddOrder(OrderData);\n    setIsEditing(false);\n  };\n\n  const startEditingHandler = () => {\n    setIsEditing(true);\n  };\n\n  const stopEditingHandler = () => {\n    setIsEditing(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"new-order\",\n    children: [//If no one is editing the form, show the \"Add New Order\" button (Close Form)\n    !isEditing && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startEditingHandler,\n      children: \"Add New Order\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 11\n    }, this), //If the \"Add New Order\" button is pressed, we want to reveal the form\n    isEditing && /*#__PURE__*/_jsxDEV(OrderForm, {\n      onSaveOrderData: saveOrderDataHandler,\n      onCancel: stopEditingHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NewOrder, \"N4qUVpaen/rROL8jPu/4huFD8lA=\");\n\n_c = NewOrder;\nexport default NewOrder;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewOrder\");","map":{"version":3,"sources":["C:/Users/micna/OneDrive/Desktop/movemateAssignment/src/components/NewOrder/NewOrder.js"],"names":["React","useState","OrderForm","NewOrder","props","isEditing","setIsEditing","saveOrderDataHandler","enteredOrderData","OrderData","id","Math","random","toString","onAddOrder","startEditingHandler","stopEditingHandler"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,OAAO,gBAAP;AACA,OAAOC,SAAP,MAAsB,aAAtB;;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAAA;;AAC1B;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAC,KAAD,CAA1C,CAF0B,CAI1B;;AACA,QAAMM,oBAAoB,GAAIC,gBAAD,IAAsB;AACjD,UAAMC,SAAS,GAAG,EAChB,GAAGD,gBADa;;AAEhB;AACN;AACA;AACME,MAAAA,EAAE,EAAEC,IAAI,CAACC,MAAL,GAAcC,QAAd;AALY,KAAlB;AAOAT,IAAAA,KAAK,CAACU,UAAN,CAAiBL,SAAjB;AACAH,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GAVD;;AAYA,QAAMS,mBAAmB,GAAG,MAAM;AAChCT,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,GAFD;;AAIA,QAAMU,kBAAkB,GAAG,MAAM;AAC/BV,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GAFD;;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,eAEI;AACA,KAACD,SAAD,iBACE;AAAQ,MAAA,OAAO,EAAEU,mBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJN,EAQI;AACAV,IAAAA,SAAS,iBACP,QAAC,SAAD;AACE,MAAA,eAAe,EAAEE,oBADnB;AAEE,MAAA,QAAQ,EAAES;AAFZ;AAAA;AAAA;AAAA;AAAA,YAVN;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD,CA5CD;;GAAMb,Q;;KAAAA,Q;AA8CN,eAAeA,QAAf","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nimport \"./NewOrder.css\";\r\nimport OrderForm from \"./OrderForm\";\r\n\r\nconst NewOrder = (props) => {\r\n  //Tracks if the order form is being used or not\r\n  const [isEditing, setIsEditing] = useState(false);\r\n\r\n  //Passes in the order data to a higher (parent of this child) component\r\n  const saveOrderDataHandler = (enteredOrderData) => {\r\n    const OrderData = {\r\n      ...enteredOrderData,\r\n      /*create a unique id to each order (I know it's not 100% \r\n      unique since theres a tiny chance you can get the same number but for the scope of \r\n      the project I decided to go with this method) */\r\n      id: Math.random().toString(),\r\n    };\r\n    props.onAddOrder(OrderData);\r\n    setIsEditing(false);\r\n  };\r\n\r\n  const startEditingHandler = () => {\r\n    setIsEditing(true);\r\n  };\r\n\r\n  const stopEditingHandler = () => {\r\n    setIsEditing(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"new-order\">\r\n      {\r\n        //If no one is editing the form, show the \"Add New Order\" button (Close Form)\r\n        !isEditing && (\r\n          <button onClick={startEditingHandler}>Add New Order</button>\r\n        )\r\n      }\r\n      {\r\n        //If the \"Add New Order\" button is pressed, we want to reveal the form\r\n        isEditing && (\r\n          <OrderForm\r\n            onSaveOrderData={saveOrderDataHandler}\r\n            onCancel={stopEditingHandler}\r\n          />\r\n        )\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewOrder;\r\n"]},"metadata":{},"sourceType":"module"}